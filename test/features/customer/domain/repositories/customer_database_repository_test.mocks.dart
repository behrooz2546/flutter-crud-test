// Mocks generated by Mockito 5.3.2 from annotations
// in mc_crud_test/test/features/customer/domain/repositories/customer_database_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mc_crud_test/features/customer/data/models/customer_model.dart'
    as _i3;
import 'package:mc_crud_test/features/customer/data/repositories/customer_database_service_impl.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomerModel_1 extends _i1.SmartFake implements _i3.CustomerModel {
  _FakeCustomerModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CustomerDatabaseServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerDatabaseServiceImpl extends _i1.Mock
    implements _i4.CustomerDatabaseServiceImpl {
  MockCustomerDatabaseServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);
  @override
  set db(_i2.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<int?> deleteCustomer(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCustomer,
          [id],
        ),
        returnValue: _i5.Future<int?>.value(),
      ) as _i5.Future<int?>);
  @override
  _i5.Future<List<_i3.CustomerModel>> getAllCustomers() => (super.noSuchMethod(
        Invocation.method(
          #getAllCustomers,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.CustomerModel>>.value(<_i3.CustomerModel>[]),
      ) as _i5.Future<List<_i3.CustomerModel>>);
  @override
  _i5.Future<_i3.CustomerModel?> getCustomer(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCustomer,
          [id],
        ),
        returnValue: _i5.Future<_i3.CustomerModel?>.value(),
      ) as _i5.Future<_i3.CustomerModel?>);
  @override
  _i5.Future<_i3.CustomerModel> insertCustomer(_i3.CustomerModel? customer) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCustomer,
          [customer],
        ),
        returnValue: _i5.Future<_i3.CustomerModel>.value(_FakeCustomerModel_1(
          this,
          Invocation.method(
            #insertCustomer,
            [customer],
          ),
        )),
      ) as _i5.Future<_i3.CustomerModel>);
  @override
  _i5.Future<int?> updateCustomer(_i3.CustomerModel? customer) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCustomer,
          [customer],
        ),
        returnValue: _i5.Future<int?>.value(),
      ) as _i5.Future<int?>);
  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}
